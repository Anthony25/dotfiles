
# If not running interactively, don't do anything
[[ $- != *i* ]] && return


# Functions
# ####################
function mkdir_cd {
    mkdir $1 && cd $1;
}

function clean_cache {
    sync
    su -c "echo 3 > /proc/sys/vm/drop_caches"
}

function reptyr_authorization {
    ORIG_VALUE=`cat /proc/sys/kernel/yama/ptrace_scope`
    echo 0 | sudo tee /proc/sys/kernel/yama/ptrace_scope > /dev/null
    reptyr $*
    echo "$ORIG_VALUE" | sudo tee /proc/sys/kernel/yama/ptrace_scope > /dev/null
}

# Alias
####################

# One-key aliases
alias e='exit'
alias g='git'
alias l='ls'
alias p='ping'
alias pg='ping 8.8.8.8'
alias v='vim'

alias cp='cp -r --reflink=auto'
alias free='free -h'
alias grep='grep --color'
alias ll='ls -alh'
alias ls='ls --color=auto'
alias maj='sudo yaourt -Syua'
alias mkcd=mkdir_cd $1
alias reptyr=reptyr_authorization $* # Set the kernel to authorize ptracing
alias sudo='sudo ' # Make aliases work with sudo


# HISTORIQUE
####################
HISTFILE=~/.histfile
HISTSIZE=1000
SAVEHIST=1000
setopt hist_ignore_all_dups
setopt sharehistory


# Other
####################

export PS1="%n@%U%m%u> "

# Let the terminal set the TERM value, if it doesn't, set to xterm-256color
[[ $TMUX = ""  ]] && export TERM="xterm-256color"

export EDITOR=vim
if [ -f ~/.dir_colors/dircolors ]
    then eval `dircolors ~/.dir_colors/dircolors`
fi

# The following lines were added by compinstall
zstyle ":completion:*:commands" rehash 1 menu select
zstyle :compinstall filename '/home/anthony/.zshrc'

#setopt completealiases
#setopt correctall

# Syntax highlighting
if [ -f /usr/share/zsh/plugins/zsh-syntax-highlighting/zsh-syntax-highlighting.zsh ]
    then source /usr/share/zsh/plugins/zsh-syntax-highlighting/zsh-syntax-highlighting.zsh
fi

autoload -Uz compinit promptinit
compinit
promptinit

# This will set the default prompt to the walters theme
prompt walters

# End of lines added by compinstall
# Lines configured by zsh-newuser-install
HISTFILE=~/.histfile
HISTSIZE=1000
SAVEHIST=1000
setopt hist_ignore_space
# End of lines configured by zsh-newuser-install


# Special keys solution
####################

autoload zkbd
function zkbd_file() {
    [[ -f ~/.zkbd/${TERM}-${VENDOR}-${OSTYPE} ]] && printf '%s' ~/".zkbd/${TERM}-${VENDOR}-${OSTYPE}" && return 0
    [[ -f ~/.zkbd/${TERM}-${DISPLAY}          ]] && printf '%s' ~/".zkbd/${TERM}-${DISPLAY}"          && return 0
    return 1
}

[[ ! -d ~/.zkbd ]] && mkdir ~/.zkbd
keyfile=$(zkbd_file)
ret=$?
if [[ ${ret} -ne 0 ]]; then
    zkbd
    keyfile=$(zkbd_file)
    ret=$?
fi
if [[ ${ret} -eq 0 ]] ; then
    source "${keyfile}"
else
    printf 'Failed to setup keys using zkbd.\n'
fi
unfunction zkbd_file; unset keyfile ret

# setup key accordingly
[[ -n "${key[Home]}"    ]]  && bindkey  "${key[Home]}"    beginning-of-line
[[ -n "${key[End]}"     ]]  && bindkey  "${key[End]}"     end-of-line
[[ -n "${key[Insert]}"  ]]  && bindkey  "${key[Insert]}"  overwrite-mode
[[ -n "${key[Delete]}"  ]]  && bindkey  "${key[Delete]}"  delete-char
[[ -n "${key[Up]}"      ]]  && bindkey  "${key[Up]}"      up-line-or-history
[[ -n "${key[Down]}"    ]]  && bindkey  "${key[Down]}"    down-line-or-history
[[ -n "${key[Left]}"    ]]  && bindkey  "${key[Left]}"    backward-char
[[ -n "${key[Right]}"   ]]  && bindkey  "${key[Right]}"   forward-char
bindkey "^[[1;5C" forward-word
bindkey "^[[1;5C" emacs-forward-word
bindkey "^[[1;5D" backward-word
bindkey "^[[1;5D" emacs-backward-word
bindkey "^[[1;5C" forward-word
bindkey "^[[1;5D" backward-word
bindkey "^[[Z" reverse-menu-complete # Shift+Tab
bindkey "^[[3;5~" kill-word            # Ctrl+Delete
bindkey '^R' history-incremental-search-backward
bindkey '^S' history-incremental-search-forward
bindkey '^P' history-search-backward
bindkey '^N' history-search-forward

# Fix de ^M bug when typing "enter" sometimes
stty icrnl
